/**
 * LORIS API
 * This document specifies the LORIS REST API.
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.LorisApi) {
      root.LorisApi = {};
    }
    root.LorisApi.UploadApi = factory(root.LorisApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Upload service.
   * @module api/UploadApi
   * @version 0.0.3
   */

  /**
   * Constructs a new UploadApi. 
   * @alias module:api/UploadApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the candidatesCandidVisitUploadsGet operation.
     * @callback module:api/UploadApi~candidatesCandidVisitUploadsGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of the uploaded dicom files
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {module:api/UploadApi~candidatesCandidVisitUploadsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.candidatesCandidVisitUploadsGet = function(candid, visit, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitUploadsGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitUploadsGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/uploads/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitUploadsImagingFilePut operation.
     * @callback module:api/UploadApi~candidatesCandidVisitUploadsImagingFilePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an imaging file
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {File} imagingFile The imaging file
     * @param {module:api/UploadApi~candidatesCandidVisitUploadsImagingFilePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.candidatesCandidVisitUploadsImagingFilePut = function(candid, visit, imagingFile, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitUploadsImagingFilePut");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitUploadsImagingFilePut");
      }

      // verify the required parameter 'imagingFile' is set
      if (imagingFile == undefined || imagingFile == null) {
        throw new Error("Missing the required parameter 'imagingFile' when calling candidatesCandidVisitUploadsImagingFilePut");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imaging_file': imagingFile
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/uploads/{imaging_file}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
