/**
 * LORIS API
 * This document specifies the LORIS REST API.
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BrainbrowserInfo', 'model/ImageFileDescription', 'model/QcStatus'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BrainbrowserInfo'), require('../model/ImageFileDescription'), require('../model/QcStatus'));
  } else {
    // Browser globals (root is window)
    if (!root.LorisApi) {
      root.LorisApi = {};
    }
    root.LorisApi.ImagingApi = factory(root.LorisApi.ApiClient, root.LorisApi.BrainbrowserInfo, root.LorisApi.ImageFileDescription, root.LorisApi.QcStatus);
  }
}(this, function(ApiClient, BrainbrowserInfo, ImageFileDescription, QcStatus) {
  'use strict';

  /**
   * Imaging service.
   * @module api/ImagingApi
   * @version 0.0.3
   */

  /**
   * Constructs a new ImagingApi. 
   * @alias module:api/ImagingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the candidatesCandidVisitImagesFilenameFormatBrainbrowserGet operation.
     * @callback module:api/ImagingApi~candidatesCandidVisitImagesFilenameFormatBrainbrowserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrainbrowserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the binary file content with the appropriate MimeType
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {String} filename The file name of the image
     * @param {module:api/ImagingApi~candidatesCandidVisitImagesFilenameFormatBrainbrowserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrainbrowserInfo}
     */
    this.candidatesCandidVisitImagesFilenameFormatBrainbrowserGet = function(candid, visit, filename, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitImagesFilenameFormatBrainbrowserGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitImagesFilenameFormatBrainbrowserGet");
      }

      // verify the required parameter 'filename' is set
      if (filename == undefined || filename == null) {
        throw new Error("Missing the required parameter 'filename' when calling candidatesCandidVisitImagesFilenameFormatBrainbrowserGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit,
        'filename': filename
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BrainbrowserInfo;

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/images/{filename}/format/brainbrowser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitImagesFilenameFormatRawGet operation.
     * @callback module:api/ImagingApi~candidatesCandidVisitImagesFilenameFormatRawGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the binary file content with the appropriate MimeType
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {String} filename The file name of the image
     * @param {module:api/ImagingApi~candidatesCandidVisitImagesFilenameFormatRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.candidatesCandidVisitImagesFilenameFormatRawGet = function(candid, visit, filename, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitImagesFilenameFormatRawGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitImagesFilenameFormatRawGet");
      }

      // verify the required parameter 'filename' is set
      if (filename == undefined || filename == null) {
        throw new Error("Missing the required parameter 'filename' when calling candidatesCandidVisitImagesFilenameFormatRawGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit,
        'filename': filename
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/images/{filename}/format/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitImagesFilenameFormatThumbnailGet operation.
     * @callback module:api/ImagingApi~candidatesCandidVisitImagesFilenameFormatThumbnailGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the thumbnail file from an image file as jpeg
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {String} filename The file name of the image
     * @param {module:api/ImagingApi~candidatesCandidVisitImagesFilenameFormatThumbnailGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.candidatesCandidVisitImagesFilenameFormatThumbnailGet = function(candid, visit, filename, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitImagesFilenameFormatThumbnailGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitImagesFilenameFormatThumbnailGet");
      }

      // verify the required parameter 'filename' is set
      if (filename == undefined || filename == null) {
        throw new Error("Missing the required parameter 'filename' when calling candidatesCandidVisitImagesFilenameFormatThumbnailGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit,
        'filename': filename
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/images/{filename}/format/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitImagesFilenameGet operation.
     * @callback module:api/ImagingApi~candidatesCandidVisitImagesFilenameGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the raw file content with the appropriate MimeType
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {String} filename The file name of the image
     * @param {module:api/ImagingApi~candidatesCandidVisitImagesFilenameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.candidatesCandidVisitImagesFilenameGet = function(candid, visit, filename, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitImagesFilenameGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitImagesFilenameGet");
      }

      // verify the required parameter 'filename' is set
      if (filename == undefined || filename == null) {
        throw new Error("Missing the required parameter 'filename' when calling candidatesCandidVisitImagesFilenameGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit,
        'filename': filename
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/images/{filename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitImagesFilenameQcGet operation.
     * @callback module:api/ImagingApi~candidatesCandidVisitImagesFilenameQcGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QcStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the raw file content with the appropriate MimeType
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {String} filename The file name of the image
     * @param {module:api/ImagingApi~candidatesCandidVisitImagesFilenameQcGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QcStatus>}
     */
    this.candidatesCandidVisitImagesFilenameQcGet = function(candid, visit, filename, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitImagesFilenameQcGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitImagesFilenameQcGet");
      }

      // verify the required parameter 'filename' is set
      if (filename == undefined || filename == null) {
        throw new Error("Missing the required parameter 'filename' when calling candidatesCandidVisitImagesFilenameQcGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit,
        'filename': filename
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [QcStatus];

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/images/{filename}/qc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitImagesGet operation.
     * @callback module:api/ImagingApi~candidatesCandidVisitImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageFileDescription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the images which have been acquired for that visit
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {module:api/ImagingApi~candidatesCandidVisitImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageFileDescription>}
     */
    this.candidatesCandidVisitImagesGet = function(candid, visit, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitImagesGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitImagesGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ImageFileDescription];

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitQcImagingGet operation.
     * @callback module:api/ImagingApi~candidatesCandidVisitQcImagingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QcStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the session level imaging QC data for a visit
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {module:api/ImagingApi~candidatesCandidVisitQcImagingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QcStatus}
     */
    this.candidatesCandidVisitQcImagingGet = function(candid, visit, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitQcImagingGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitQcImagingGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = QcStatus;

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/qc/imaging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
