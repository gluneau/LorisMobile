/**
 * LORIS API
 * This document specifies the LORIS REST API.
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Instrument', 'model/InstrumentForm', 'model/Project'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Instrument'), require('../model/InstrumentForm'), require('../model/Project'));
  } else {
    // Browser globals (root is window)
    if (!root.LorisApi) {
      root.LorisApi = {};
    }
    root.LorisApi.ProjectApi = factory(root.LorisApi.ApiClient, root.LorisApi.Instrument, root.LorisApi.InstrumentForm, root.LorisApi.Project);
  }
}(this, function(ApiClient, Instrument, InstrumentForm, Project) {
  'use strict';

  /**
   * Project service.
   * @module api/ProjectApi
   * @version 0.0.3
   */

  /**
   * Constructs a new ProjectApi. 
   * @alias module:api/ProjectApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the projectsGet operation.
     * @callback module:api/ProjectApi~projectsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of the project names in this Loris instance
     * @param {module:api/ProjectApi~projectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.projectsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsNameCandidatesGet operation.
     * @callback module:api/ProjectApi~projectsNameCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the active candidates in this project
     * @param {String} name The name of the project
     * @param {module:api/ProjectApi~projectsNameCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.projectsNameCandidatesGet = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling projectsNameCandidatesGet");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/projects/{name}/candidates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsNameGet operation.
     * @callback module:api/ProjectApi~projectsNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the project definition
     * @param {String} name The name of the project
     * @param {module:api/ProjectApi~projectsNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.projectsNameGet = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling projectsNameGet");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsNameInstrumentsGet operation.
     * @callback module:api/ProjectApi~projectsNameInstrumentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instrument>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the instruments used/installed in this project&#39;s test batteries
     * @param {String} name The name of the project
     * @param {module:api/ProjectApi~projectsNameInstrumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instrument>}
     */
    this.projectsNameInstrumentsGet = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling projectsNameInstrumentsGet");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Instrument];

      return this.apiClient.callApi(
        '/projects/{name}/instruments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsNameInstrumentsInstrumentGet operation.
     * @callback module:api/ProjectApi~projectsNameInstrumentsInstrumentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstrumentForm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns JSON representation of that instrument
     * @param {String} name The name of the project
     * @param {String} instrument The name of the instrument
     * @param {module:api/ProjectApi~projectsNameInstrumentsInstrumentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstrumentForm}
     */
    this.projectsNameInstrumentsInstrumentGet = function(name, instrument, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling projectsNameInstrumentsInstrumentGet");
      }

      // verify the required parameter 'instrument' is set
      if (instrument == undefined || instrument == null) {
        throw new Error("Missing the required parameter 'instrument' when calling projectsNameInstrumentsInstrumentGet");
      }


      var pathParams = {
        'name': name,
        'instrument': instrument
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InstrumentForm;

      return this.apiClient.callApi(
        '/projects/{name}/instruments/{instrument}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
