/**
 * LORIS API
 * This document specifies the LORIS REST API.
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Candidate', 'model/InlineResponse2001', 'model/InstrumentData', 'model/VisitsData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Candidate'), require('../model/InlineResponse2001'), require('../model/InstrumentData'), require('../model/VisitsData'));
  } else {
    // Browser globals (root is window)
    if (!root.LorisApi) {
      root.LorisApi = {};
    }
    root.LorisApi.CandidateApi = factory(root.LorisApi.ApiClient, root.LorisApi.Candidate, root.LorisApi.InlineResponse2001, root.LorisApi.InstrumentData, root.LorisApi.VisitsData);
  }
}(this, function(ApiClient, Candidate, InlineResponse2001, InstrumentData, VisitsData) {
  'use strict';

  /**
   * Candidate service.
   * @module api/CandidateApi
   * @version 0.0.3
   */

  /**
   * Constructs a new CandidateApi. 
   * @alias module:api/CandidateApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the candidatesCandidGet operation.
     * @callback module:api/CandidateApi~candidatesCandidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific candidate object along with a list of its visit labels
     * @param {String} candid The id of the candidate
     * @param {module:api/CandidateApi~candidatesCandidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.candidatesCandidGet = function(candid, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidGet");
      }


      var pathParams = {
        'candid': candid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/candidates/{candid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitGet operation.
     * @callback module:api/CandidateApi~candidatesCandidVisitGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VisitsData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an object representation of the metadata for that candidate&#39;s visit.
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {module:api/CandidateApi~candidatesCandidVisitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VisitsData}
     */
    this.candidatesCandidVisitGet = function(candid, visit, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VisitsData;

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitInstrumentsGet operation.
     * @callback module:api/CandidateApi~candidatesCandidVisitInstrumentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the instruments that were administered for that candidate at that visit
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {module:api/CandidateApi~candidatesCandidVisitInstrumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.candidatesCandidVisitInstrumentsGet = function(candid, visit, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitInstrumentsGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitInstrumentsGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/instruments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitInstrumentsInstrumentDdeGet operation.
     * @callback module:api/CandidateApi~candidatesCandidVisitInstrumentsInstrumentDdeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstrumentData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the instruments that were administered for that candidate at that visit
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {String} instrument The instrument short_name
     * @param {module:api/CandidateApi~candidatesCandidVisitInstrumentsInstrumentDdeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstrumentData}
     */
    this.candidatesCandidVisitInstrumentsInstrumentDdeGet = function(candid, visit, instrument, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitInstrumentsInstrumentDdeGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitInstrumentsInstrumentDdeGet");
      }

      // verify the required parameter 'instrument' is set
      if (instrument == undefined || instrument == null) {
        throw new Error("Missing the required parameter 'instrument' when calling candidatesCandidVisitInstrumentsInstrumentDdeGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit,
        'instrument': instrument
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InstrumentData;

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/instruments/{instrument}/dde', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesCandidVisitInstrumentsInstrumentGet operation.
     * @callback module:api/CandidateApi~candidatesCandidVisitInstrumentsInstrumentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstrumentData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the instruments that were administered for that candidate at that visit
     * @param {String} candid The id of the candidate
     * @param {String} visit The visit_label of that candidate&#39;s visit
     * @param {String} instrument The instrument short_name
     * @param {module:api/CandidateApi~candidatesCandidVisitInstrumentsInstrumentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstrumentData}
     */
    this.candidatesCandidVisitInstrumentsInstrumentGet = function(candid, visit, instrument, callback) {
      var postBody = null;

      // verify the required parameter 'candid' is set
      if (candid == undefined || candid == null) {
        throw new Error("Missing the required parameter 'candid' when calling candidatesCandidVisitInstrumentsInstrumentGet");
      }

      // verify the required parameter 'visit' is set
      if (visit == undefined || visit == null) {
        throw new Error("Missing the required parameter 'visit' when calling candidatesCandidVisitInstrumentsInstrumentGet");
      }

      // verify the required parameter 'instrument' is set
      if (instrument == undefined || instrument == null) {
        throw new Error("Missing the required parameter 'instrument' when calling candidatesCandidVisitInstrumentsInstrumentGet");
      }


      var pathParams = {
        'candid': candid,
        'visit': visit,
        'instrument': instrument
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InstrumentData;

      return this.apiClient.callApi(
        '/candidates/{candid}/{visit}/instruments/{instrument}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesGet operation.
     * @callback module:api/CandidateApi~candidatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Candidate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of all active candidates of the study
     * @param {module:api/CandidateApi~candidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Candidate>}
     */
    this.candidatesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Candidate];

      return this.apiClient.callApi(
        '/candidates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the candidatesPost operation.
     * @callback module:api/CandidateApi~candidatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Candidate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new candidate
     * @param {module:model/Candidate} candidate 
     * @param {module:api/CandidateApi~candidatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Candidate}
     */
    this.candidatesPost = function(candidate, callback) {
      var postBody = candidate;

      // verify the required parameter 'candidate' is set
      if (candidate == undefined || candidate == null) {
        throw new Error("Missing the required parameter 'candidate' when calling candidatesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Candidate;

      return this.apiClient.callApi(
        '/candidates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
